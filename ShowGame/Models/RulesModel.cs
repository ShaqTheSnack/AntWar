using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShowGame.Models
{
    public class RulesModel
    {
        public string Rules { get; set; } = "-- What are the rules? --\r\n\r\n -- Game Structure --\r\nAn AntWar game consists of a number of battles.\r\nFor each battle, random values are chosen for the variable sizes within the ranges specified by the player.\r\n\r\nEach player programs a race of ants.\r\nIn each battle, multiple teams of ants compete against each other.\r\nEach team belongs to a particular race, but there can be multiple teams from the same race fighting against each other.\r\nThe race determines which control algorithm the ants use.\r\n\r\n\r\n-- Battlefield and Bases --\r\nThe battle takes place on a map that is between 250 and 500 tiles wide (MapWidth) and high (MapHeight).\r\nThe ants don’t know the exact map size but know that it is always divisible by 64.\r\n\r\nEach team starts with a base, placed almost randomly on the map.\r\nHowever, bases are ensured not to be placed too close to one another.\r\n\r\n\r\n-- Ants and Food --\r\nEach team starts with between 10 and 50 ants (StartAnts), which are positioned at their base.\r\nSome tiles may also have pieces of food that ants can pick up and carry around.\r\n\r\n\r\n-- Turns and Actions --\r\nA battle takes place in turns, where all ants on the map take turns in a random order.\r\nOn each turn, an ant can choose to:\r\n\r\n\tStay still.\r\n\tMove 1 tile in one of the directions north, south, east, or west.\r\n\tIf there is food on the tile it’s standing on, it can pick up a piece of food and move.\r\n\tBuild a new base. To build a new base, there must be at least 25 ants (NewBaseAnts) and 50 pieces of food (NewBaseFood) on the tile. When the base is built, the food disappears.\r\n\r\n\r\n-- Ant Movement Methods --\r\nAnts can use the following commands, one per turn:\r\n\r\npython ------------------------------ THIS WILL BE CONVERTED TO C# ONCE FUNCTIONS ARE IMPLEMENTED\r\ndef north(self, with_food=False):\r\ndef south(self, with_food=False):\r\ndef east(self, with_food=False):\r\ndef west(self, with_food=False):\r\ndef build_base(self):\r\ndef stay(self):\r\n\r\n\r\n-- Food Becomes New Ants --\r\nWhen an ant brings food to its base, or if there’s leftover food when a new base is built, the food immediately becomes new ants of the same team.\r\nThese new ants begin moving in the next turn.\r\n\r\n\r\n-- The Ants' Brains --\r\nEach ant has a simple brain with a limited amount of memory.\r\nAnts can share information with other ants on the same tile as them.\r\nThey can also see what’s on adjacent tiles and know the values of certain constants like NewBaseAnts,\r\nNewBaseFood, and BaseValue (the sum of NewBaseAnts and NewBaseFood).\r\n\r\n\r\n -- Destroying Enemies --\r\nWhen an ant moves onto a tile with enemy ants or an enemy base, all enemies on the tile are destroyed.\r\n\r\n\r\n-- Points --\r\nA team’s points are calculated as the number of ants it has plus the number of bases multiplied by BaseValue.\r\nTotal points are the sum of the two teams with the most points.\r\n\r\n\r\n-- New Food --\r\nAfter each turn, new food is placed on the map.\r\nAs long as the total points are less than the product of MapWidth and MapHeight divided by NewFoodSpace (15-40),\r\na clump of food will appear on a random empty tile.\r\nThe clump will contain between NewFoodMin (10-30) and NewFoodMin + NewFoodDiff (5-20) pieces of food.\r\n\r\n-- End of Battle --\r\nA battle ends when:\r\n\r\n\tAn ant team achieves 75% (WinPercent) of total points.\r\n\t20,000 turns have passed (TimeOutTurn).\r\n\tThe winner is the team with the most points when the battle ends.\r\n";

        //public string Rules { get; set; } = "-- Hvad er reglerne? --\r\n\r\nI teksten er ord skrevet med kursiv variable størrelser, \r\nsom kan ændres med parametre, men som myrerne ikke kan læse. \r\nOrd i maskinskrift er konstanter, som myrerne kan forstå. \r\nEfterfølgende tal i parentes angiver intervaller, \r\nsom størrelserne kan være inden for, \r\nmedmindre andet er angivet. \r\nVigtige begreber er skrevet med fed, \r\nførste gang de nævnes.\r\n\r\n\r\n\r\n-- Spilstruktur --\r\nEt spil MyreKrig består af et antal kampe. \r\nTil hver kamp vælges tilfældige værdier for de variable størrelser inden for intervaller, \r\nsom spilleren har angivet.\r\n\r\nHver spiller programmerer en race af myrer. \r\nI hver kamp kæmper flere hold af myrer mod hinanden.\r\nHvert hold tilhører en bestemt race, \r\nmen der kan være flere hold fra samme race, \r\nsom kæmper mod hinanden. Racen bestemmer, \r\nhvilken styringsalgoritme myrerne bruger.\r\n\r\n\r\n\r\n-- Kampområde og baser --\r\nKampen foregår på et område, \r\nder er mellem 250 og 500 felter bredt (MapWidth) og højt (MapHeight). \r\nMyrerne kender ikke præcist disse størrelser, \r\nmen ved, at de altid er delelige med 64.\r\n\r\nHvert hold starter med en base, \r\nsom placeres næsten tilfældigt på kortet. \r\nDog sørges der for, at baserne ikke ligger for tæt på hinanden.\r\n\r\n\r\n\r\n-- Myrer og mad --\r\nHvert hold starter med mellem 10 og 50 myrer (StartAnts), \r\nder er placeret ved deres base. \r\nPå nogle felter kan der også være stykker af mad, \r\nsom myrerne kan samle op og bære rundt.\r\n\r\n\r\n\r\n-- Ture og handlinger --\r\nEn kamp foregår i ture, \r\nhvor alle myrer på kortet skiftes til at trække i tilfældig rækkefølge. \r\nNår en myre trækker, kan den vælge at:\r\n\r\n\t Blive stående.\r\n\t Gå 1 felt i en af retningerne nord, syd, øst eller vest.\r\n\t Hvis der er mad på feltet, den står på, kan den tage et stykke mad med sig og flytte sig.\r\n\t Bygge en ny base. For at bygge en ny base skal der være mindst 25 myrer (NewBaseAnts) og 50 stykker mad (NewBaseFood) på feltet. Når basen er bygget, forsvinder maden.\r\n\r\n\r\n\r\n-- Myrernes bevægelsesmetoder --\r\nMyrer kan bruge følgende kommandoer, én per tur:\r\n\r\npython ------------------------------ DETTE SKAL OMSKRIVES TIL C# NÅR JEG HAR LAVET EN FUNCTIONERNE\r\ndef north(self, with_food=False):\r\ndef south(self, with_food=False):\r\ndef east(self, with_food=False):\r\ndef west(self, with_food=False):\r\ndef build_base(self):\r\ndef stay(self):\r\n\r\n\r\n\r\n-- Mad bliver til nye myrer --\r\nNår en myre slæber mad ind til sin base, \r\neller hvis der er mad til overs, når en ny base bygges, \r\nbliver maden straks til nye myrer af samme hold. \r\nDisse nye myrer begynder at trække i den næste tur.\r\n\r\n\r\n\r\n-- Myrernes hjerner --\r\nHver myre har en simpel hjerne med en begrænset mængde hukommelse. \r\nMyrer kan dele information med andre myrer, \r\nder står på samme felt som dem selv. \r\nDe kan også se, hvad der er på de nærliggende felter samt værdierne af nogle konstanter som NewBaseAnts, \r\nNewBaseFood, og BaseValue (summen af NewBaseAnts og NewBaseFood).\r\n\r\n\r\n\r\n --Ødelæggelse af fjender --\r\nNår en myre bevæger sig ind på et felt, \r\nhvor der er fjendtlige myrer eller en fjendtlig base, \r\nbliver alle fjender på feltet ødelagt.\r\n\r\n\r\n\r\n-- Point --\r\nEt holds point beregnes som antallet af myrer, \r\ndet har, plus antallet af baser ganget med BaseValue. \r\nTotalpoint er summen af de to hold med flest point.\r\n\r\n\r\n\r\n-- Ny mad --\r\nEfter hver tur placeres ny mad på kortet. \r\nSå længe det samlede antal point er mindre end produktet af \r\nMapWidth og MapHeight divideret med NewFoodSpace (15-40), \r\nvil der dukke en klump mad op på et tilfældigt, tomt felt. \r\nKlumpen vil indeholde mellem NewFoodMin (10-30) og NewFoodMin + NewFoodDiff (5-20) stykker mad.\r\n\r\n-- Afslutning af kamp --\r\nEn kamp slutter, når:\r\n\r\n\t Et myrehold opnår 75% (WinPercent) af totalpoint.\r\n\t Der er gået 20.000 ture (TimeOutTurn).\r\n\t Vinderen er det hold, der har flest point, når kampen slutter.\r\n";
    }
}
